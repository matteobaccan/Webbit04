// Decompiled by Jad v1.5.8f. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Logger.java

import java.io.PrintStream;
import org.aspectj.lang.*;
import org.aspectj.lang.reflect.CodeSignature;
import org.aspectj.runtime.internal.AroundClosure;

public class Logger
{

    Logger()
    {
    }

    public Object ajc$around$Logger$248(AroundClosure ajc_aroundClosure, org.aspectj.lang.JoinPoint.StaticPart thisJoinPointStaticPart, JoinPoint thisJoinPoint)
    {
        System.out.println("Metodo invocato: " + thisJoinPointStaticPart.getSignature().getDeclaringType().getName() + "." + thisJoinPointStaticPart.getSignature().getName());
        ajc$inlineAccessMethod$Logger$Logger$printParameters(thisJoinPoint);
        System.out.println("Esecuzione metodo:");
        Object result = ajc$around$Logger$248proceed(ajc_aroundClosure);
        System.out.println("Valore di ritorno: " + result);
        return result;
    }

    static Object ajc$around$Logger$248proceed(Logger this)
        throws Throwable
    {
        return (Object)this.run(new Object[0]);
    }

    private static void printParameters(JoinPoint jp)
    {
        System.out.println("Argomenti: ");
        Object args[] = jp.getArgs();
        String names[] = ((CodeSignature)jp.getSignature()).getParameterNames();
        Class types[] = ((CodeSignature)jp.getSignature()).getParameterTypes();
        System.out.println("\tNum\tNome\tTipo - Valore");
        for(int i = 0; i < args.length; i++)
            System.out.println("\t" + i + "\t" + names[i] + "\t" + types[i].getName() + " - " + args[i]);

    }

    public static Logger aspectOf()
    {
        ajc$perSingletonInstance;
        if(ajc$perSingletonInstance == null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        throw new NoAspectBoundException();
    }

    public static boolean hasAspect()
    {
        return ajc$perSingletonInstance != null;
    }

    private static void ajc$postClinit()
    {
        ajc$perSingletonInstance = new Logger();
    }

    public static void ajc$inlineAccessMethod$Logger$Logger$printParameters(JoinPoint arg0)
    {
        printParameters(arg0);
    }

    public static final Logger ajc$perSingletonInstance;

    static 
    {
        ajc$postClinit();
    }
}
